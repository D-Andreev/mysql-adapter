// Generated by CoffeeScript 1.10.0
(function() {
  var MySQL, _, columns, config, expect, joinBy, joinType, mysql, results, table1, table2, updatedRow, where, whereOperator;

  MySQL = require('../../index').MySQL;

  config = require('../../config.json');

  mysql = new MySQL(config);

  results = false;

  _ = require('lodash');

  expect = require('chai').expect;

  where = {};

  columns = [];

  joinBy = [];

  joinType = '';

  table1 = '';

  table2 = '';

  updatedRow = {};

  whereOperator = null;

  module.exports = function() {
    this.When(/^I am connected to mysql$/, function(done) {
      return mysql.ping(function(err) {
        mysql = new MySQL(config);
        if (err) {
          return mysql.connect(done);
        }
        return done();
      });
    });
    this.Then(/^I can ping$/, function(done) {
      return mysql.ping(done);
    });
    this.Then(/^I close the connection$/, function(done) {
      return mysql.close(done);
    });
    this.Then(/^I destroy the connection$/, function() {
      return mysql.destroy();
    });
    this.When(/^I send the query "([^"]*)"$/, function(sql, done) {
      return mysql.query(sql, function(err, res) {
        if (err) {
          return done(err);
        }
        results = res;
        return done();
      });
    });
    this.Then(/^I receive the following results$/, function(res) {
      var keys, values;
      keys = _.keys(results[0]);
      values = _.values(results[0]);
      return _.forEach(res.raw(), function(currentRes, i) {
        expect(currentRes[0]).to.eql(keys[i].toString());
        return expect(currentRes[1]).to.eql(values[i].toString());
      });
    });
    this.When(/^I select all columns in "([^"]*)" without where clause/, function(table, done) {
      return mysql.selectAll({
        table: table
      }, function(err, res) {
        if (err) {
          return done(err);
        }
        results = res;
        return done();
      });
    });
    this.When(/^I select all columns in "([^"]*)" where$/, function(table, whereClause, done) {
      where = {};
      _.forEach(whereClause.raw(), function(el) {
        return where[el[0]] = el[1];
      });
      return mysql.selectAll({
        table: table,
        where: where,
        whereOperator: whereOperator
      }, function(err, res) {
        whereOperator = null;
        if (err) {
          return done(err);
        }
        results = res;
        return done();
      });
    });
    this.When(/^I delete from "([^"]*)" where$/, function(table, whereClause, done) {
      where = {};
      _.forEach(whereClause.raw(), function(el) {
        return where[el[0]] = el[1];
      });
      return mysql["delete"]({
        table: table,
        where: where,
        whereOperator: whereOperator
      }, function(err, res) {
        whereOperator = null;
        if (err) {
          return done(err);
        }
        results = res;
        return done();
      });
    });
    this.When(/^I set to select the following columns$/, function(cols) {
      columns = [];
      return _.forEach(cols.raw(), function(el) {
        return columns.push(el[0]);
      });
    });
    this.When(/^I set the where clause to$/, function(whereClause) {
      where = {};
      return _.forEach(whereClause.raw(), function(el) {
        return where[el[0]] = el[1];
      });
    });
    this.When(/^I perform the select on "([^"]*)"$/, function(table, done) {
      return mysql.select({
        table: table,
        columns: columns,
        where: where
      }, function(err, res) {
        if (err) {
          return done(err);
        }
        results = res;
        return done();
      });
    });
    this.When(/^I set to join the results from the tables "([^"]*)", "([^"]*)"$/, function(t1, t2) {
      table1 = t1;
      return table2 = t2;
    });
    this.When(/^I set the join type to "([^"]*)"$/, function(type) {
      return joinType = type;
    });
    this.When(/^I set to join by$/, function(cols) {
      columns = [];
      return joinBy = _.map(cols.raw(), function(el) {
        var obj;
        obj = {};
        obj[el[0]] = el[1];
        return obj;
      });
    });
    this.When(/^I perform the join$/, function(done) {
      return mysql.join({
        table1: table1,
        table2: table2,
        joinType: joinType,
        joinBy: joinBy
      }, function(err, res) {
        if (err) {
          return done(err);
        }
        results = res;
        return done();
      });
    });
    this.When(/^I insert into "([^"]*)" the row$/, function(table, data, done) {
      var row;
      row = {};
      _.forEach(data.raw(), function(el) {
        return row[el[0]] = el[1];
      });
      return mysql.insertOne({
        table: table,
        row: row,
        ignore: false
      }, function(err, res) {
        if (err) {
          return done(err);
        }
        results = res;
        return done();
      });
    });
    this.When(/^I set the updated row to$/, function(row) {
      updatedRow = {};
      return _.forEach(row.raw(), function(el) {
        return updatedRow[el[0]] = el[1];
      });
    });
    this.When(/^I update the row in "([^"]*)"/, function(table, done) {
      return mysql.update({
        table: table,
        row: updatedRow,
        where: where
      }, function(err, res) {
        if (err) {
          return done(err);
        }
        results = res;
        return done();
      });
    });
    this.When(/^I set the where operator to "([^"]*)"$/, function(operator) {
      return whereOperator = operator;
    });
    return this.Then(/^I truncate "([^"]*)"$/, function(table, done) {
      return mysql.truncate({
        table: table
      }, function(err, res) {
        if (err) {
          return done(err);
        }
        return done();
      });
    });
  };

}).call(this);
