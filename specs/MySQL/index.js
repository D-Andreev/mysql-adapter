// Generated by CoffeeScript 1.10.0
(function() {
  var MySQL, chai, expect, sinon;

  MySQL = require('../../MySQL');

  chai = require('chai');

  chai.use(require('sinon-chai'));

  expect = chai.expect;

  sinon = require('sinon');

  describe('MySQL', function() {
    before(function() {
      this.config = {
        host: 'localhost',
        user: 'root',
        password: '',
        database: 'users'
      };
      this.mysql = new MySQL(this.config);
      this.mysql.conn.createConnection = sinon.stub();
      this.mysql.conn.connect = sinon.stub();
      this.mysql.conn.end = sinon.stub();
      this.mysql.conn.destroy = sinon.stub();
      this.mysql.conn.query = sinon.stub();
      this.mysql.conn.ping = sinon.stub();
      this.done = sinon.stub();
      this.table = 'users';
      this.where = {
        id: 1
      };
      this.columns = ['id', 'first_name'];
      this.row = {
        first_name: 'firstName',
        last_name: 'lastName',
        email: 'email'
      };
      return this.rows = [
        {
          first_name: 'firstName1',
          last_name: 'lastName1',
          email: 'email1'
        }, {
          first_name: 'firstName2',
          last_name: 'lastName2',
          email: 'email2'
        }
      ];
    });
    describe('constructor', function() {
      return it('returns a mysql object', function() {
        return expect(this.mysql).to.be instanceof MySQL;
      });
    });
    describe('connect', function() {
      return it('connects', function() {
        this.mysql.connect(this.done);
        return expect(this.mysql.conn.connect).to.have.been.calledWith(this.done);
      });
    });
    describe('close', function() {
      return it('closes the connection', function() {
        this.mysql.close(this.done);
        return expect(this.mysql.conn.end).to.have.been.calledWith(this.done);
      });
    });
    describe('destroy', function() {
      return it('destroys the connection', function() {
        this.mysql.destroy();
        return expect(this.mysql.conn.destroy).to.have.been.called;
      });
    });
    describe('query', function() {
      return it('sends the query', function() {
        var sql;
        sql = 'SELECT * FROM users';
        this.mysql.query(sql, this.done);
        return expect(this.mysql.conn.query).to.have.been.calledWith(sql);
      });
    });
    describe('selectAll', function() {
      context('without where clause', function() {
        beforeEach(function() {
          this.mysql.selectAll({
            table: this.table
          }, this.done);
          return this.expectedSql = 'SELECT * FROM users';
        });
        return it('builds the sql and sends it', function() {
          return expect(this.mysql.conn.query).to.have.been.calledWith(this.expectedSql);
        });
      });
      context('with where clause', function() {
        beforeEach(function() {
          this.mysql.selectAll({
            table: this.table,
            where: this.where
          }, this.done);
          return this.expectedSql = 'SELECT * FROM users WHERE `id` = 1';
        });
        return it('builds the sql and sends it', function() {
          return expect(this.mysql.conn.query).to.have.been.calledWith(this.expectedSql);
        });
      });
      return context('with where clause and OR operator', function() {
        beforeEach(function() {
          var where;
          where = {
            id: 1,
            name: 'name'
          };
          this.mysql.selectAll({
            table: this.table,
            where: where,
            whereOperator: 'OR'
          }, this.done);
          return this.expectedSql = "SELECT * FROM users WHERE `id` = 1 OR `name` = 'name'";
        });
        return it('builds the sql and sends it', function() {
          return expect(this.mysql.conn.query).to.have.been.calledWith(this.expectedSql);
        });
      });
    });
    describe('select', function() {
      context('without where clause', function() {
        beforeEach(function() {
          this.mysql.select({
            table: this.table,
            columns: this.columns
          }, this.done);
          return this.expectedSql = 'SELECT `id`, `first_name` FROM users';
        });
        return it('builds the sql and sends it', function() {
          return expect(this.mysql.conn.query).to.have.been.calledWith(this.expectedSql);
        });
      });
      context('with where clause', function() {
        beforeEach(function() {
          this.mysql.select({
            table: this.table,
            columns: this.columns,
            where: this.where
          }, this.done);
          return this.expectedSql = 'SELECT `id`, `first_name` FROM users WHERE `id` = 1';
        });
        return it('builds the sql and sends it', function() {
          return expect(this.mysql.conn.query).to.have.been.calledWith(this.expectedSql);
        });
      });
      return context('with where clause and OR operator', function() {
        beforeEach(function() {
          var where;
          where = {
            id: 1,
            name: 'name'
          };
          this.mysql.select({
            table: this.table,
            where: where,
            whereOperator: 'OR'
          }, this.done);
          return this.expectedSql = "SELECT * FROM users WHERE `id` = 1 OR `name` = 'name'";
        });
        return it('builds the sql and sends it', function() {
          return expect(this.mysql.conn.query).to.have.been.calledWith(this.expectedSql);
        });
      });
    });
    describe('join', function() {
      beforeEach(function() {
        this.table1 = this.table;
        this.table2 = 'pictures';
        this.joinType = 'RIGHT';
        return this.joinBy = {
          id: 'picture_id'
        };
      });
      context('without where clause', function() {
        context('without columns', function() {
          beforeEach(function() {
            this.mysql.join({
              table1: this.table1,
              table2: this.table2,
              joinBy: this.joinBy,
              joinType: this.joinType
            }, this.done);
            return this.expectedSql = 'SELECT * FROM `users` RIGHT JOIN `pictures` on users.id=pictures.picture_id';
          });
          return it('builds the sql and sends it', function() {
            return expect(this.mysql.conn.query).to.have.been.calledWith(this.expectedSql);
          });
        });
        return context('with columns', function() {
          beforeEach(function() {
            this.mysql.join({
              table1: this.table1,
              table2: this.table2,
              columns: this.columns,
              joinBy: this.joinBy,
              joinType: this.joinType
            }, this.done);
            return this.expectedSql = 'SELECT `id`, `first_name` FROM `users` RIGHT JOIN `pictures` on users.id=pictures.picture_id';
          });
          return it('builds the sql and sends it', function() {
            return expect(this.mysql.conn.query).to.have.been.calledWith(this.expectedSql);
          });
        });
      });
      return context('with where clause', function() {
        context('without columns', function() {
          beforeEach(function() {
            this.mysql.join({
              table1: this.table1,
              table2: this.table2,
              where: this.where,
              joinBy: this.joinBy,
              joinType: this.joinType
            }, this.done);
            return this.expectedSql = 'SELECT * FROM `users` RIGHT JOIN `pictures` on users.id=pictures.picture_id WHERE `id` = 1';
          });
          return it('builds the sql and sends it', function() {
            return expect(this.mysql.conn.query).to.have.been.calledWith(this.expectedSql);
          });
        });
        context('with columns', function() {
          beforeEach(function() {
            this.mysql.join({
              table1: this.table1,
              table2: this.table2,
              columns: this.columns,
              where: this.where,
              joinBy: this.joinBy,
              joinType: this.joinType
            }, this.done);
            return this.expectedSql = 'SELECT `id`, `first_name` FROM `users` RIGHT JOIN `pictures` on users.id=pictures.picture_id WHERE `id` = 1';
          });
          return it('builds the sql and sends it', function() {
            return expect(this.mysql.conn.query).to.have.been.calledWith(this.expectedSql);
          });
        });
        return context('with OR operator', function() {
          beforeEach(function() {
            var where;
            where = {
              id: 1,
              name: 'name'
            };
            this.mysql.join({
              table1: this.table1,
              table2: this.table2,
              columns: this.columns,
              where: where,
              whereOperator: 'OR',
              joinBy: this.joinBy,
              joinType: this.joinType
            }, this.done);
            return this.expectedSql = "SELECT `id`, `first_name` FROM `users` RIGHT JOIN `pictures` on users.id=pictures.picture_id WHERE `id` = 1 OR `name` = 'name'";
          });
          return it('builds the sql and sends it', function() {
            return expect(this.mysql.conn.query).to.have.been.calledWith(this.expectedSql);
          });
        });
      });
    });
    describe('insertOne', function() {
      context('without ignore', function() {
        beforeEach(function() {
          this.mysql.insertOne({
            table: this.table,
            row: this.row,
            ignore: false
          }, this.done);
          return this.expectedSql = "INSERT  INTO `users` (`first_name`, `last_name`, `email`) VALUES ('firstName', 'lastName', 'email')";
        });
        return it('builds the sql and sends it', function() {
          return expect(this.mysql.conn.query).to.have.been.calledWith(this.expectedSql);
        });
      });
      return context('with ignore', function() {
        beforeEach(function() {
          this.mysql.insertOne({
            table: this.table,
            row: this.row,
            ignore: true
          }, this.done);
          return this.expectedSql = "INSERT IGNORE INTO `users` (`first_name`, `last_name`, `email`) VALUES ('firstName', 'lastName', 'email')";
        });
        return it('builds the sql and sends it', function() {
          return expect(this.mysql.conn.query).to.have.been.calledWith(this.expectedSql);
        });
      });
    });
    describe('insertMany', function() {
      context('without ignore', function() {
        beforeEach(function() {
          this.mysql.insertMany({
            table: this.table,
            rows: this.rows,
            ignore: false
          }, this.done);
          return this.expectedSql = "INSERT  INTO `users` (`first_name`, `last_name`, `email`) VALUES ('firstName1', 'lastName1', 'email1'), ('firstName2', 'lastName2', 'email2')";
        });
        return it('builds the sql and sends it', function() {
          return expect(this.mysql.conn.query).to.have.been.calledWith(this.expectedSql);
        });
      });
      return context('with ignore', function() {
        beforeEach(function() {
          this.mysql.insertMany({
            table: this.table,
            rows: this.rows,
            ignore: true
          }, this.done);
          return this.expectedSql = "INSERT IGNORE INTO `users` (`first_name`, `last_name`, `email`) VALUES ('firstName1', 'lastName1', 'email1'), ('firstName2', 'lastName2', 'email2')";
        });
        return it('builds the sql and sends it', function() {
          return expect(this.mysql.conn.query).to.have.been.calledWith(this.expectedSql);
        });
      });
    });
    describe('update', function() {
      context('without where clause', function() {
        beforeEach(function() {
          this.mysql.update({
            table: this.table,
            row: this.row
          }, this.done);
          return this.expectedSql = "UPDATE users SET first_name = 'firstName', last_name = 'lastName', email = 'email'";
        });
        return it('builds the sql and sends it', function() {
          return expect(this.mysql.conn.query).to.have.been.calledWith(this.expectedSql);
        });
      });
      context('with where clause', function() {
        beforeEach(function() {
          this.mysql.update({
            table: this.table,
            row: this.row,
            where: this.where
          }, this.done);
          return this.expectedSql = "UPDATE users SET first_name = 'firstName', last_name = 'lastName', email = 'email' WHERE `id` = 1";
        });
        return it('builds the sql and sends it', function() {
          return expect(this.mysql.conn.query).to.have.been.calledWith(this.expectedSql);
        });
      });
      return context('with where clause and OR operator', function() {
        beforeEach(function() {
          var where;
          where = {
            id: 1,
            name: 'name'
          };
          this.mysql.update({
            table: this.table,
            row: this.row,
            where: where,
            whereOperator: 'OR'
          }, this.done);
          return this.expectedSql = "UPDATE users SET first_name = 'firstName', last_name = 'lastName', email = 'email' WHERE `id` = 1 OR `name` = 'name'";
        });
        return it('builds the sql and sends it', function() {
          return expect(this.mysql.conn.query).to.have.been.calledWith(this.expectedSql);
        });
      });
    });
    describe('ping', function() {
      return it('pings', function() {
        this.mysql.ping(this.done);
        return expect(this.mysql.conn.ping).to.have.been.calledWithExactly(this.done);
      });
    });
    describe('delete', function() {
      context('without where clause', function() {
        beforeEach(function() {
          this.mysql["delete"]({
            table: this.table
          }, this.done);
          return this.expectedSql = 'DELETE FROM users';
        });
        return it('builds the sql and sends it', function() {
          return expect(this.mysql.conn.query).to.have.been.calledWith(this.expectedSql);
        });
      });
      context('with where clause', function() {
        beforeEach(function() {
          this.mysql["delete"]({
            table: this.table,
            where: this.where
          }, this.done);
          return this.expectedSql = 'DELETE FROM users WHERE `id` = 1';
        });
        return it('builds the sql and sends it', function() {
          return expect(this.mysql.conn.query).to.have.been.calledWith(this.expectedSql);
        });
      });
      return context('with where clause and OR operator', function() {
        beforeEach(function() {
          var where;
          where = {
            id: 1,
            name: 'name'
          };
          this.mysql["delete"]({
            table: this.table,
            where: where,
            whereOperator: 'OR'
          }, this.done);
          return this.expectedSql = "DELETE FROM users WHERE `id` = 1 OR `name` = 'name'";
        });
        return it('builds the sql and sends it', function() {
          return expect(this.mysql.conn.query).to.have.been.calledWith(this.expectedSql);
        });
      });
    });
    return describe('truncate', function() {
      beforeEach(function() {
        this.mysql.truncate({
          table: this.table
        }, this.done);
        return this.expectedSql = 'TRUNCATE TABLE `users`';
      });
      return it('builds the sql and sends it', function() {
        return expect(this.mysql.conn.query).to.have.been.calledWith(this.expectedSql);
      });
    });
  });

}).call(this);
