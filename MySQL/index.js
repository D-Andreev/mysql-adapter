// Generated by CoffeeScript 1.10.0
(function() {
  var MySQL, _, mysql;

  mysql = require('mysql');

  _ = require('lodash');

  module.exports = MySQL = (function() {
    function MySQL(config, usePool) {
      if (usePool) {
        this.conn = mysql.createPool(config);
      } else {
        this.conn = mysql.createConnection(config);
      }
    }

    MySQL.prototype.connect = function(done) {
      return this.conn.connect(done);
    };

    MySQL.prototype.close = function(done) {
      return this.conn.end(done);
    };

    MySQL.prototype.destroy = function() {
      return this.conn.destroy();
    };

    MySQL.prototype.query = function(query, done) {
      return this.conn.query(query.trim(), done);
    };

    MySQL.prototype.selectAll = function(arg, done) {
      var sql, table, where, whereOperator;
      table = arg.table, where = arg.where, whereOperator = arg.whereOperator;
      sql = "SELECT * FROM " + table + " " + (this._buildWhereClause(where, whereOperator));
      return this.query(sql, done);
    };

    MySQL.prototype.select = function(arg, done) {
      var columns, sql, table, where, whereOperator;
      table = arg.table, columns = arg.columns, where = arg.where, whereOperator = arg.whereOperator;
      sql = "SELECT " + (this._buildColumns(columns)) + " FROM " + table + " " + (this._buildWhereClause(where, whereOperator));
      return this.query(sql, done);
    };

    MySQL.prototype.join = function(arg, done) {
      var columns, joinBy, joinType, sql, table1, table2, where, whereOperator;
      table1 = arg.table1, table2 = arg.table2, joinType = arg.joinType, columns = arg.columns, joinBy = arg.joinBy, where = arg.where, whereOperator = arg.whereOperator;
      sql = "SELECT " + (this._buildColumns(columns)) + " FROM `" + table1 + "` " + joinType + " ";
      sql += "JOIN `" + table2 + "` on " + (this._buildJoin(table1, table2, joinBy)) + " " + (this._buildWhereClause(where, whereOperator));
      return this.query(sql, done);
    };

    MySQL.prototype.insertOne = function(arg, done) {
      var ignore, row, sql, table;
      table = arg.table, row = arg.row, ignore = arg.ignore;
      ignore = ignore ? 'IGNORE' : '';
      sql = "INSERT " + ignore + " INTO `" + table + "` (" + (this._buildColumns(_.keys(row))) + ") VALUES (" + (this._escape(_.values(row))) + ")";
      return this.query(sql, done);
    };

    MySQL.prototype.insertMany = function(arg, done) {
      var ignore, rows, sql, table;
      table = arg.table, rows = arg.rows, ignore = arg.ignore;
      ignore = ignore ? 'IGNORE' : '';
      sql = "INSERT " + ignore + " INTO `" + table + "` (" + (this._buildColumns(_.keys(rows[0]))) + ") VALUES ";
      _.forEach(rows, (function(_this) {
        return function(row) {
          return sql += "(" + (_this._escape(_.values(row))) + "), ";
        };
      })(this));
      sql = sql.substring(0, sql.length - 2);
      return this.query(sql, done);
    };

    MySQL.prototype.update = function(arg, done) {
      var row, sql, table, where, whereOperator;
      table = arg.table, row = arg.row, where = arg.where, whereOperator = arg.whereOperator;
      sql = "UPDATE " + table + " " + (this._buildSetClause(row)) + " " + (this._buildWhereClause(where, whereOperator));
      return this.query(sql, done);
    };

    MySQL.prototype["delete"] = function(arg, done) {
      var sql, table, where, whereOperator;
      table = arg.table, where = arg.where, whereOperator = arg.whereOperator;
      sql = "DELETE FROM " + table + " " + (this._buildWhereClause(where, whereOperator));
      return this.query(sql, done);
    };

    MySQL.prototype.truncate = function(arg, done) {
      var sql, table;
      table = arg.table;
      sql = "TRUNCATE TABLE `" + table + "`";
      return this.query(sql, done);
    };

    MySQL.prototype.ping = function(done) {
      return this.conn.ping(done);
    };

    MySQL.prototype._escape = function(string) {
      return this.conn.escape(string);
    };

    MySQL.prototype._buildJoin = function(table1, table2, joinBy) {
      var sql;
      if (!Array.isArray(joinBy)) {
        joinBy = [joinBy];
      }
      sql = '';
      _.forEach(joinBy, function(el) {
        var key, value;
        key = _.head(_.keys(el));
        value = _.head(_.values(el));
        return sql += table1 + "." + key + "=" + table2 + "." + value + " && ";
      });
      return sql.substring(0, sql.length - 4);
    };

    MySQL.prototype._buildWhereClause = function(where, whereOperator) {
      var sql;
      if (_.isUndefined(where)) {
        return '';
      }
      sql = 'WHERE ';
      if (whereOperator == null) {
        whereOperator = 'AND';
      }
      _.forEach(where, (function(_this) {
        return function(v, k) {
          return sql += "`" + k + "` = " + (_this._escape(v)) + " " + whereOperator + " ";
        };
      })(this));
      return sql.substring(0, sql.length - 4);
    };

    MySQL.prototype._buildSetClause = function(row) {
      var sql;
      sql = 'SET ';
      _.forEach(row, (function(_this) {
        return function(v, k) {
          return sql += k + " = " + (_this._escape(v)) + ", ";
        };
      })(this));
      return sql.substring(0, sql.length - 2);
    };

    MySQL.prototype._buildColumns = function(columns) {
      var columnsStr;
      if (_.isUndefined(columns)) {
        return '*';
      }
      columnsStr = '';
      _.forEach(columns, function(v) {
        return columnsStr += "`" + v + "`, ";
      });
      return columnsStr.substring(0, columnsStr.length - 2);
    };

    return MySQL;

  })();

}).call(this);
